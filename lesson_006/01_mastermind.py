# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#
#   в цикле,
#   пока число не отгадано
#       у пользователя запрашивается вариант числа
#                  модуль движка проверяет число и выдает быков/коров
#                                     результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT
from termcolor import cprint, colored
from mastermind_engine import check_number, pick_a_number, SEQ

number_of_moves = 0
do_u_want_play_again = ''
true = True
while true:
    number_of_moves = 0
    cprint('Загаданное число - {} '.format(pick_a_number()), color='red')  # Вызываем функцию создания числа
    while True:
        number = input(colored('Введите число ', 'blue'))  # 1234
        number = list(number)
        if number[0] == '0':
            print('Ошибка, число не должно начинаться с 0')
            # number = input(colored('Введите число ', 'blue'))
            # number = list(number)
            continue
        if len(number) > 4:
            print('Ошибка, число должно быть 4-х значным')
            # number = input(colored('Введите число ', 'blue'))
            # number = list(number)
            continue
        #number_set = set(number)
        if len(set(number)) < 4:
            print('Ошибка, число должно состоять из уникальных символов')
            # number = input(colored('Введите число ', 'blue'))
            # number = list(number)
            continue
        cprint('Результат{}'.format((check_number(number=number))), 'yellow')
        number_of_moves += 1  # проверяем число
        if check_number(number) == {'bulls': 4, 'cows': 0}:
            cprint('Поздравляю! Колличество попыток:{}'.format(number_of_moves), 'green')
            do_u_want_play_again = input(colored('Хотите сыграть вновь ? ', "red"))
            if do_u_want_play_again == ('Да') or do_u_want_play_again == ('да'):
                break
            else:
                cprint('До скорого !', 'magenta')
                exit()
